{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BASE","UPLOAD_ID","UPLOAD_VIDEO","session","getIDURL","App","useState","PreviewPath","setPreviewPath","ImagePath","setImagePath","isValid","setIsValid","loading","setLoading","setSession","match","setMatch","text","setText","handleChangePhoto","a","target","file","files","URL","createObjectURL","form","FormData","append","fetch","method","body","then","blob","json","response","console","log","handleChangeVideo","className","type","accept","capture","onChange","src","alt","height","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kOAIMA,G,MAAO,0CACPC,EAAS,UAAMD,EAAN,qBACTE,EAAe,SAAAC,GAAO,gBAAOH,EAAP,wCAA2CG,IACjEC,EAAW,SAAAD,GAAO,gBAAOH,EAAP,iCAAoCG,EAApC,qBAyETE,MAvEf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,OAIiBN,oBAAS,GAJ1B,mBAINO,EAJM,KAIGC,EAJH,OAKiBR,mBAAS,IAL1B,mBAKNH,EALM,KAKGY,EALH,OAMaT,oBAAU,GANvB,mBAMNU,EANM,KAMCC,EAND,OAOWX,mBAAS,QAPpB,mBAONY,EAPM,KAOAC,EAPA,KASPC,EAAiB,uCAAG,mCAAAC,EAAA,6DAAQC,EAAR,EAAQA,OAChCR,GAAW,GACLS,EAAOD,EAAOE,MAAM,GAC1BhB,EAAeiB,IAAIC,gBAAgBH,KAE7BI,EAAO,IAAIC,UACZC,OAAO,QAASN,GANG,SAQHO,MAAM7B,EAAW,CACpC8B,OAAQ,OACRC,KAAML,IACLM,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAXG,OAQpBC,EARoB,OAaxBtB,GAAW,GACXC,EAAWqB,EAASjC,SACpBO,EAAaN,EAASgC,EAASjC,UAC/BS,EAAWwB,EAASzB,SAEpB0B,QAAQC,IAAIF,GAlBY,4CAAH,sDAqBjBG,EAAiB,uCAAG,mCAAAlB,EAAA,6DAAQC,EAAR,EAAQA,OAChCR,GAAW,GACLS,EAAOD,EAAOE,MAAM,IAEpBG,EAAO,IAAIC,UACZC,OAAO,QAASN,GALG,SAOHO,MAAM5B,EAAaC,GAAU,CAChD4B,OAAQ,OACRC,KAAML,IACLM,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAVG,OAOpBC,EAPoB,OAYxBtB,GAAW,GACXuB,QAAQC,IAAIF,GACZxB,EAAWwB,EAASzB,SACpBM,EAASmB,EAASpB,OAClBG,EAAQiB,EAASlB,MAhBO,4CAAH,sDAmBvB,OACE,yBAAKsB,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAKrC,GACL,2BAAOsC,KAAK,OAAOC,OAAO,UAAUC,SAAO,EAACC,SAAUxB,IACtD,yBAAKyB,IAAKtC,EAAauC,IAAI,OAAOC,OAAO,QACxClC,EACG,6CACA,uDAA6BF,EAAU,SAAW,YAEtD,yBAAKkC,IAAKpC,EAAWqC,IAAI,OAAOC,OAAO,QACvC,2BAAON,KAAK,OAAOC,OAAO,UAAUC,QAAQ,OAAOC,SAAUL,KAG/D,6BACE,qCAAWvB,GACX,oCAAUE,MC9DE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnC,MACvB,2DCZNoC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.c458a7e7.chunk.js","sourcesContent":["import React, { useState } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nconst BASE = 'https://shappes.crossoverdeveloper.com'\nconst UPLOAD_ID = `${BASE}/entity/upload/id`;\nconst UPLOAD_VIDEO = session => `${BASE}/entity/upload/video?session=${session}`;\nconst getIDURL = session => `${BASE}/entity/files?session=${session}&name=idcrop.jpg`\n\nfunction App() {\n  const [PreviewPath, setPreviewPath] = useState('');\n  const [ImagePath, setImagePath] = useState('');\n  const [isValid, setIsValid] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [session, setSession] = useState('');\n  const [match, setMatch] = useState(-1);\n  const [text, setText] = useState('null');\n\n  const handleChangePhoto = async ({target}) => {\n    setLoading(true)\n    const file = target.files[0]; \n    setPreviewPath(URL.createObjectURL(file))\n    \n    const form = new FormData();\n    form.append('front', file);\n  \n    let response = await fetch(UPLOAD_ID, {\n      method: 'post',\n      body: form,\n    }).then(blob => blob.json());\n    \n    setLoading(false)\n    setSession(response.session)\n    setImagePath(getIDURL(response.session))\n    setIsValid(response.isValid)\n    \n    console.log(response)\n  }\n\n  const handleChangeVideo = async ({target}) => {\n    setLoading(true)\n    const file = target.files[0]; \n    \n    const form = new FormData();\n    form.append('front', file);\n  \n    let response = await fetch(UPLOAD_VIDEO(session), {\n      method: 'post',\n      body: form,\n    }).then(blob => blob.json());\n\n    setLoading(false)\n    console.log(response)\n    setIsValid(response.isValid)\n    setMatch(response.match)\n    setText(response.text)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>{session}</h1>\n        <input type=\"file\" accept=\"image/*\" capture onChange={handleChangePhoto}  />\n        <img src={PreviewPath} alt=\"nani\" height=\"200\" />\n        {loading \n          ? <span>cargando...</span> \n          : <span>La identificacion es: {isValid ? \"Valida\" : \"Invalida\"}</span>}\n        \n        <img src={ImagePath} alt=\"nani\" height=\"200\" />\n        <input type=\"file\" accept=\"video/*\" capture=\"user\" onChange={handleChangeVideo} />\n      </header>\n\n      <div>\n        <p>Match: {match}</p>\n        <p>Text: {text}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}